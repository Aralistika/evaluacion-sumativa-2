package com.aiep.evsum2.domain;

import static com.aiep.evsum2.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DepartamentosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentosAllPropertiesEquals(Departamentos expected, Departamentos actual) {
        assertDepartamentosAutoGeneratedPropertiesEquals(expected, actual);
        assertDepartamentosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentosAllUpdatablePropertiesEquals(Departamentos expected, Departamentos actual) {
        assertDepartamentosUpdatableFieldsEquals(expected, actual);
        assertDepartamentosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentosAutoGeneratedPropertiesEquals(Departamentos expected, Departamentos actual) {
        assertThat(expected)
            .as("Verify Departamentos auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentosUpdatableFieldsEquals(Departamentos expected, Departamentos actual) {
        assertThat(expected)
            .as("Verify Departamentos relevant properties")
            .satisfies(e -> assertThat(e.getNombredepartamento()).as("check nombredepartamento").isEqualTo(actual.getNombredepartamento()))
            .satisfies(e ->
                assertThat(e.getUbicaciondepartamento()).as("check ubicaciondepartamento").isEqualTo(actual.getUbicaciondepartamento())
            )
            .satisfies(e ->
                assertThat(e.getPresupuestodepartamento())
                    .as("check presupuestodepartamento")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPresupuestodepartamento())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDepartamentosUpdatableRelationshipsEquals(Departamentos expected, Departamentos actual) {
        // empty method
    }
}
